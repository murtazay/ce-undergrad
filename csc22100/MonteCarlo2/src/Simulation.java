import java.util.ArrayList;
import java.util.Random;

public class Simulation {
	//Changes all made public
	public Double max; // Made private to avoid multiple function calls to getMax
	public Double min; // Made private to avoid multiple function calls to getMin
	public int[] bins; //Added
	public Double binSize; //Added
	public int numberOfBins; //Added
	/**	 
	 * The function takes 2 parameters, list and size and 
	 * generates random numbers with mean 0 and standard deviation 1. The function also
	 * finds the minimum and maximum elements in the list.
	 * @param list of type ArrayList(Double) is assumed to be an empty ArrayList of type Double.
	 * @param size of type int is the number of elements in the list after.
	 */
	public void generateNormalRandomNumbers(ArrayList<Double> list, int size)
	{
		//Makes the random object used to generate the random numbers
		Random generator = new Random();
		//sets min to 2
		min =  2.0;
		//sets max to -2
		max = -2.0;
		//Loop keeps going until the number of elements in the list is
		//equal to the size parameter
		while(list.size() != size)
		{
			Double tmp = generator.nextGaussian();
			if(tmp < min)
				min = tmp;
			else if(tmp > max)
				max = tmp;
			//Appends elements generated by nextGaussian to the list
			list.add(tmp);
		}
	}
	/**
	 * This functions "throws" all the elements from list into one of
	 * the following bins based on the number of bins
	 * @param list of type ArrayList(Double) is the list of Doubles that 
	 * has to be thrown in 
	 * @param numberOfBins is the size of the returning array of type int
	 * @return returns the array with the values of the occurrence of numbers
	 * in each bin
	 */
	public int[] makeBins(ArrayList<Double> list, int numberOfBins)
	{
		//Initialize an array of size numberOfBins
		int[] bins = new int[numberOfBins];
		//Determine the size of each bin
		Double binSize = getRange(list)/numberOfBins;
		//Enhanced for loop traverses the list
		for(Double i : list)
		{
			//the index is given by getBin and the value at that
			//index is incremented.
			bins[getBin(i, binSize, min, max)]++;
		}
		//Added
		this.numberOfBins = numberOfBins;
		this.binSize = binSize;
		this.bins = bins;
		//Added 
		//Returns the array
		return bins;
	}
	/**
	 * This function finds the bin that the element goes into.
	 * @param element is the value which needs to be thrown into a bin
	 * @param binSize is the size of each bin
	 * @param min is the minimum element in the list
	 * @param max is the maximum element in the list
	 * @return the bin number that the element should go in
	 */
	public int getBin(Double element, Double binSize, Double min, Double max)
	{
		//Make lower side bound of bin range
		Double stepInitial = min;
		//Make upper side bound of bin range
		Double stepFinal = stepInitial + binSize;
		//count keeps track of the current bin that is being checked
		int count = 0;
		//binNumber is the maximum number of bins minus one,
		//because the bins are array
		int binNumber = (int)((max-min)/binSize)-1;
		//Loop determines bin
		while (true)
		{

			//statement tests for the maximum case
			//Maximum case includes the inclusive upper bound
			if(element == max)
			{
				//Return binNumber
				return binNumber;
			}
			//Statement tests for the inclusive lower bound
			//and makes sure the noninclusive upper bound is not 
			//included.
			else if(element < stepFinal && element >= stepInitial)
			{
				//Return the current value of count.
				return count;
			}
			else
			{
				//New bounds are calculated and the 
				//current bin counter, count in incremented.
				stepInitial += binSize;
				stepFinal += binSize;
				count++;
			}
		}
	}
	/**
	 * The function traverses the list and returns minimum element found in the list.
	 * @param list
	 * @return The minimum element in the list
	 */
	public Double getMin(ArrayList<Double> list)
	{
		return this.min;
	}
	/**
	 * The function traverses the list and returns the maximum element found in the list.
	 * @param list of type ArrayList(Double) is the traversing list
	 * @return The Maximum element in the list
	 */
	public Double getMax(ArrayList<Double> list)
	{
		return this.max;
	}
	/**
	 * The function takes a single parameter list and returns the difference between
	 * the maximum and minimum element in the list. 
	 * @param list of type ArrayList(Double)
	 * @return The range of the elements as defined by the maximum element minus the minimum.
	 */
	public Double getRange(ArrayList<Double> list)
	{
		return (getMax(list)-getMin(list));
	}
}
